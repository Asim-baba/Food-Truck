
import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Download, Share2 } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';

interface ExportUtilityProps {
  names: string[];
  favorites: string[];
}

const ExportUtility: React.FC<ExportUtilityProps> = ({ names, favorites }) => {
  const { toast } = useToast();
  const [exportFormat, setExportFormat] = useState("text");
  const [exportSource, setExportSource] = useState("current");
  
  const formatData = () => {
    const dataToExport = exportSource === "favorites" ? favorites : names;
    
    if (dataToExport.length === 0) {
      toast({
        title: "No data to export",
        description: exportSource === "favorites" ? "Add some names to your favorites first" : "Generate some names first",
        variant: "destructive",
      });
      return null;
    }
    
    switch (exportFormat) {
      case "json":
        return JSON.stringify(dataToExport.map(name => ({ name })), null, 2);
      
      case "csv":
        return "Name\n" + dataToExport.map(name => `"${name}"`).join("\n");
      
      case "markdown":
        return `# Food Truck Names\n\nGenerated by foodtechnologylabs.com\n\n${dataToExport.map(name => `- ${name}`).join('\n')}`;
      
      case "text":
      default:
        return dataToExport.join('\n');
    }
  };
  
  const getFileExtension = () => {
    switch (exportFormat) {
      case "json": return "json";
      case "csv": return "csv";
      case "markdown": return "md";
      case "text":
      default: return "txt";
    }
  };
  
  const handleExport = () => {
    const formattedData = formatData();
    if (!formattedData) return;
    
    const blob = new Blob([formattedData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `food-truck-names.${getFileExtension()}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Export successful!",
      description: `Names exported as ${exportFormat.toUpperCase()}`,
    });
  };
  
  const handleShare = async () => {
    const formattedData = formatData();
    if (!formattedData) return;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Food Truck Names',
          text: formattedData.substring(0, 500) + (formattedData.length > 500 ? '...' : ''),
        });
        toast({
          title: "Shared successfully!",
          description: "Content shared via your device's share feature",
        });
      } catch (error) {
        if ((error as Error).name !== 'AbortError') {
          toast({
            title: "Sharing failed",
            description: "There was an error sharing this content",
            variant: "destructive",
          });
        }
      }
    } else {
      // Fallback for browsers that don't support the Web Share API
      navigator.clipboard.writeText(formattedData);
      toast({
        title: "Copied to clipboard!",
        description: "The content has been copied to your clipboard for sharing",
      });
    }
  };
  
  return (
    <Card className="p-4 mt-4">
      <h3 className="text-lg font-semibold mb-3">Export & Share</h3>
      <div className="grid grid-cols-2 gap-3 mb-3">
        <div>
          <label className="block text-sm font-medium mb-1">Data Source</label>
          <Select
            value={exportSource}
            onValueChange={setExportSource}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select data to export" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="current">Current Generation</SelectItem>
              <SelectItem value="favorites">Favorites</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Format</label>
          <Select
            value={exportFormat}
            onValueChange={setExportFormat}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select export format" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="text">Plain Text</SelectItem>
              <SelectItem value="json">JSON</SelectItem>
              <SelectItem value="csv">CSV</SelectItem>
              <SelectItem value="markdown">Markdown</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="flex space-x-2">
        <Button 
          variant="outline" 
          className="flex-1"
          onClick={handleExport}
        >
          <Download className="mr-2 h-4 w-4" />
          Export
        </Button>
        <Button 
          variant="outline" 
          className="flex-1"
          onClick={handleShare}
        >
          <Share2 className="mr-2 h-4 w-4" />
          Share
        </Button>
      </div>
    </Card>
  );
};

export default ExportUtility;
