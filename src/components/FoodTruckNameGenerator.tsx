
import React, { useState, useEffect, useRef } from 'react';
import { useToast } from '@/components/ui/use-toast';
import { Card } from '@/components/ui/card';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { Truck, TrendingUp, Sparkles } from 'lucide-react';

import { nameStyles, businessTypes } from '@/constants/foodTruckData';
import { generateNames } from '@/utils/nameGeneratorUtils';

// Import the refactored components
import GeneratorForm, { FormData } from './food-truck-generator/GeneratorForm';
import GeneratedNames from './food-truck-generator/GeneratedNames';
import FavoritesSection from './food-truck-generator/FavoritesSection';
import HistorySection from './food-truck-generator/HistorySection';
import AnalyzerTab from './food-truck-generator/AnalyzerTab';
import TrendingInsights from './food-truck-generator/TrendingInsights';

const FoodTruckNameGenerator: React.FC = () => {
  // Form state
  const [formData, setFormData] = useState<FormData>({
    concept: '',
    style: 'creative',
    numberOfNames: 3,
    includeEmoji: false,
    businessType: 'general',
    nameLength: [2],
    localRegion: '',
  });

  // Generator state
  const [generatedNames, setGeneratedNames] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [favorites, setFavorites] = useState<string[]>([]);
  const [history, setHistory] = useState<string[][]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [selectedTab, setSelectedTab] = useState("generator");
  const [selectedName, setSelectedName] = useState("");
  
  const conceptInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  
  useEffect(() => {
    const savedFavorites = localStorage.getItem('foodTruckNameFavorites');
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
    
    const savedHistory = localStorage.getItem('foodTruckNameHistory');
    if (savedHistory) {
      setHistory(JSON.parse(savedHistory));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('foodTruckNameFavorites', JSON.stringify(favorites));
  }, [favorites]);

  useEffect(() => {
    localStorage.setItem('foodTruckNameHistory', JSON.stringify(history));
  }, [history]);

  const updateFormData = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleGenerateNames = () => {
    setIsGenerating(true);
    
    setTimeout(() => {
      const newNames = generateNames(formData);
      
      setGeneratedNames(newNames);
      if (newNames.length > 0) {
        setSelectedName(newNames[0]);
      }
      
      setHistory(prev => {
        const updatedHistory = [...prev, newNames];
        if (updatedHistory.length > 10) {
          return updatedHistory.slice(updatedHistory.length - 10);
        }
        return updatedHistory;
      });
      
      setIsGenerating(false);
      
      toast({
        title: "Names generated!",
        description: `${formData.numberOfNames} unique food truck names created based on your concept`,
      });
    }, 1500);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied!",
      description: `"${text}" copied to clipboard`,
    });
  };

  const toggleFavorite = (name: string) => {
    if (favorites.includes(name)) {
      setFavorites(favorites.filter(n => n !== name));
      toast({
        title: "Removed from favorites",
        description: `"${name}" removed from your favorites`,
      });
    } else {
      setFavorites([...favorites, name]);
      toast({
        title: "Added to favorites!",
        description: `"${name}" added to your favorites`,
      });
    }
  };

  const downloadFavorites = () => {
    if (favorites.length === 0) {
      toast({
        title: "No favorites to download",
        description: "Add some names to your favorites first",
        variant: "destructive",
      });
      return;
    }
    
    const content = `# My Favorite Food Truck Names\n\nGenerated by FoodTechnologyLabs.com\n\n${favorites.map((name, i) => `${i+1}. ${name}`).join('\n')}`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'food-truck-name-favorites.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Favorites downloaded!",
      description: `${favorites.length} food truck names saved to your device`,
    });
  };

  const selectName = (name: string) => {
    setSelectedName(name);
    setSelectedTab("analyzer");
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-10 space-y-10">
      <div className="text-center space-y-3 animate-fade-in">
        <div className="inline-flex items-center justify-center p-2 bg-primary/10 rounded-full mb-2">
          <Truck className="h-6 w-6 text-primary" />
        </div>
        <h1 className="text-4xl sm:text-5xl font-bold tracking-tight">
          Food Truck Name Generator
        </h1>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Create unique and memorable food truck names for foodtechnologylabs.com
        </p>
      </div>
      
      <Tabs 
        defaultValue="generator" 
        value={selectedTab}
        onValueChange={setSelectedTab}
        className="animate-fade-in"
      >
        <TabsList className="grid grid-cols-3 mb-6">
          <TabsTrigger value="generator">Name Generator</TabsTrigger>
          <TabsTrigger value="analyzer" disabled={!selectedName}>
            <Sparkles className="h-4 w-4 mr-1.5" />
            Business Tools
          </TabsTrigger>
          <TabsTrigger value="trends">
            <TrendingUp className="h-4 w-4 mr-1.5" />
            Industry Trends
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="generator" className="space-y-6">
          <Card className="p-6 shadow-md animate-fade-in" style={{animationDelay: '0.1s'}}>
            <GeneratorForm 
              formData={formData}
              updateFormData={updateFormData}
              onGenerate={handleGenerateNames}
              isGenerating={isGenerating}
              nameStyles={nameStyles}
              businessTypes={businessTypes}
            />
          </Card>
          
          <GeneratedNames 
            names={generatedNames} 
            favorites={favorites}
            onCopy={copyToClipboard}
            onToggleFavorite={toggleFavorite}
            onSelectName={selectName}
          />
          
          <FavoritesSection 
            favorites={favorites}
            onCopy={copyToClipboard}
            onToggleFavorite={toggleFavorite}
            onSelectName={selectName}
            onDownload={downloadFavorites}
          />
          
          <HistorySection 
            history={history}
            favorites={favorites}
            showHistory={showHistory}
            onToggleHistory={() => setShowHistory(!showHistory)}
            onToggleFavorite={toggleFavorite}
          />
        </TabsContent>
        
        <TabsContent value="analyzer" className="space-y-6">
          <AnalyzerTab 
            selectedName={selectedName}
            style={formData.style}
            favorites={favorites}
            onCopy={copyToClipboard}
            onToggleFavorite={toggleFavorite}
            onGoToGenerator={() => setSelectedTab("generator")}
          />
        </TabsContent>
        
        <TabsContent value="trends" className="space-y-6">
          <Card className="p-6 shadow-md">
            <h2 className="text-2xl font-bold mb-4">Food Truck Industry Trends</h2>
            <p className="text-muted-foreground mb-6">
              Stay updated with the latest trends in the food truck industry to make informed business decisions.
            </p>
            
            <TrendingInsights />
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default FoodTruckNameGenerator;
