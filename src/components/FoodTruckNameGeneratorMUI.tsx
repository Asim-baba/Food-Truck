
import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  Tabs, 
  Tab,
  Paper, 
  Stack,
  useTheme
} from '@mui/material';
import DirectionsBusIcon from '@mui/icons-material/DirectionsBus';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';

// Import the existing components (they'll continue to work with MUI)
import GeneratorForm, { FormData } from './food-truck-generator/GeneratorForm';
import GeneratedNames from './food-truck-generator/GeneratedNames';
import FavoritesSection from './food-truck-generator/FavoritesSection';
import HistorySection from './food-truck-generator/HistorySection';
import AnalyzerTab from './food-truck-generator/AnalyzerTab';
import TrendingInsights from './food-truck-generator/TrendingInsights';

import { nameStyles, businessTypes } from '@/constants/foodTruckData';
import { generateNames } from '@/utils/nameGeneratorUtils';
import { useToast } from '@/components/ui/use-toast';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const FoodTruckNameGeneratorMUI: React.FC = () => {
  // Form state
  const [formData, setFormData] = useState<FormData>({
    concept: '',
    style: 'creative',
    numberOfNames: 3,
    includeEmoji: false,
    businessType: 'general',
    nameLength: [2],
    localRegion: '',
  });

  // Generator state
  const [generatedNames, setGeneratedNames] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [favorites, setFavorites] = useState<string[]>([]);
  const [history, setHistory] = useState<string[][]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [tabValue, setTabValue] = useState(0);
  const [selectedName, setSelectedName] = useState("");
  
  const { toast } = useToast();
  const theme = useTheme();
  
  useEffect(() => {
    const savedFavorites = localStorage.getItem('foodTruckNameFavorites');
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
    
    const savedHistory = localStorage.getItem('foodTruckNameHistory');
    if (savedHistory) {
      setHistory(JSON.parse(savedHistory));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('foodTruckNameFavorites', JSON.stringify(favorites));
  }, [favorites]);

  useEffect(() => {
    localStorage.setItem('foodTruckNameHistory', JSON.stringify(history));
  }, [history]);

  const updateFormData = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleGenerateNames = () => {
    setIsGenerating(true);
    
    setTimeout(() => {
      const newNames = generateNames(formData);
      
      setGeneratedNames(newNames);
      if (newNames.length > 0) {
        setSelectedName(newNames[0]);
      }
      
      setHistory(prev => {
        const updatedHistory = [...prev, newNames];
        if (updatedHistory.length > 10) {
          return updatedHistory.slice(updatedHistory.length - 10);
        }
        return updatedHistory;
      });
      
      setIsGenerating(false);
      
      toast({
        title: "Names generated!",
        description: `${formData.numberOfNames} unique food truck names created based on your concept`,
      });
    }, 1500);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied!",
      description: `"${text}" copied to clipboard`,
    });
  };

  const toggleFavorite = (name: string) => {
    if (favorites.includes(name)) {
      setFavorites(favorites.filter(n => n !== name));
      toast({
        title: "Removed from favorites",
        description: `"${name}" removed from your favorites`,
      });
    } else {
      setFavorites([...favorites, name]);
      toast({
        title: "Added to favorites!",
        description: `"${name}" added to your favorites`,
      });
    }
  };

  const downloadFavorites = () => {
    if (favorites.length === 0) {
      toast({
        title: "No favorites to download",
        description: "Add some names to your favorites first",
        variant: "destructive",
      });
      return;
    }
    
    const content = `# My Favorite Food Truck Names\n\nGenerated by FoodTechnologyLabs.com\n\n${favorites.map((name, i) => `${i+1}. ${name}`).join('\n')}`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'food-truck-name-favorites.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Favorites downloaded!",
      description: `${favorites.length} food truck names saved to your device`,
    });
  };

  const selectName = (name: string) => {
    setSelectedName(name);
    setTabValue(1); // Switch to analyzer tab
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Container maxWidth="lg" sx={{ py: 5 }}>
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        <Box 
          sx={{ 
            display: 'inline-flex', 
            alignItems: 'center', 
            justifyContent: 'center', 
            bgcolor: 'primary.light', 
            borderRadius: '50%', 
            p: 1, 
            mb: 2 
          }}
        >
          <DirectionsBusIcon color="primary" />
        </Box>
        <Typography variant="h3" component="h1" gutterBottom fontWeight="bold">
          Food Truck Name Generator
        </Typography>
        <Typography variant="subtitle1" color="text.secondary" sx={{ maxWidth: 600, mx: 'auto' }}>
          Create unique and memorable food truck names for foodtechnologylabs.com
        </Typography>
      </Box>
      
      <Paper elevation={0} sx={{ mb: 4 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange} 
          aria-label="food truck generator tabs"
          centered
          sx={{ borderBottom: 1, borderColor: 'divider' }}
        >
          <Tab 
            label="Name Generator" 
            icon={<DirectionsBusIcon />} 
            iconPosition="start" 
          />
          <Tab 
            label="Business Tools" 
            icon={<AutoAwesomeIcon />} 
            iconPosition="start" 
            disabled={!selectedName}
          />
          <Tab 
            label="Industry Trends" 
            icon={<TrendingUpIcon />} 
            iconPosition="start" 
          />
        </Tabs>
        
        <TabPanel value={tabValue} index={0}>
          <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
            <GeneratorForm 
              formData={formData}
              updateFormData={updateFormData}
              onGenerate={handleGenerateNames}
              isGenerating={isGenerating}
              nameStyles={nameStyles}
              businessTypes={businessTypes}
            />
          </Paper>
          
          <Stack spacing={3}>
            {generatedNames.length > 0 && (
              <GeneratedNames 
                names={generatedNames} 
                favorites={favorites}
                onCopy={copyToClipboard}
                onToggleFavorite={toggleFavorite}
                onSelectName={selectName}
              />
            )}
            
            {favorites.length > 0 && (
              <FavoritesSection 
                favorites={favorites}
                onCopy={copyToClipboard}
                onToggleFavorite={toggleFavorite}
                onSelectName={selectName}
                onDownload={downloadFavorites}
              />
            )}
            
            {history.length > 0 && (
              <HistorySection 
                history={history}
                favorites={favorites}
                showHistory={showHistory}
                onToggleHistory={() => setShowHistory(!showHistory)}
                onToggleFavorite={toggleFavorite}
              />
            )}
          </Stack>
        </TabPanel>
        
        <TabPanel value={tabValue} index={1}>
          <AnalyzerTab 
            selectedName={selectedName}
            style={formData.style}
            favorites={favorites}
            onCopy={copyToClipboard}
            onToggleFavorite={toggleFavorite}
            onGoToGenerator={() => setTabValue(0)}
          />
        </TabPanel>
        
        <TabPanel value={tabValue} index={2}>
          <Paper elevation={2} sx={{ p: 3 }}>
            <Typography variant="h5" fontWeight="bold" gutterBottom>
              Food Truck Industry Trends
            </Typography>
            <Typography color="text.secondary" sx={{ mb: 3 }}>
              Stay updated with the latest trends in the food truck industry to make informed business decisions.
            </Typography>
            
            <TrendingInsights />
          </Paper>
        </TabPanel>
      </Paper>
    </Container>
  );
};

export default FoodTruckNameGeneratorMUI;
